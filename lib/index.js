/*! For license information please see index.js.LICENSE.txt */
!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("StorageDB",[],e):"object"==typeof exports?exports.StorageDB=e():n.StorageDB=e()}(self,(function(){return(()=>{"use strict";var __webpack_modules__={"./src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\r\n * @Author: Vir\r\n * @Date: 2021-08-06 14:42:56\r\n * @Last Modified by: Vir\r\n * @Last Modified time: 2021-10-26 18:00:37\r\n */\nconst ops = ["$eq", "$gt", "$gte", "$in", "$lt", "$lte", "$ne", "$nin"];\n\nconst isNotNumber = val => {\n  return typeof val !== "number";\n};\n\nconst Operator = {\n  // 相等\n  $eq: (val, tar) => {\n    return tar === val;\n  },\n  // 大于\n  $gt: (val, tar) => {\n    if (isNotNumber(val)) throw new Error("\'$gt\' value must be a number");\n    return tar > val;\n  },\n  // 大于等于\n  $gte: (val, tar) => {\n    if (isNotNumber(val)) throw new Error("\'$gte\' value must be a number");\n    return tar >= val;\n  },\n  // 包含\n  $in: (val, tar) => {\n    if (!(val instanceof Array)) throw new Error("\'$in\' value must be an array");\n    return val.includes(tar);\n  },\n  // 小于\n  $lt: (val, tar) => {\n    if (isNotNumber(val)) throw new Error("\'$lt\' value must be a number");\n    return tar < val;\n  },\n  // 小于等于\n  $lte: (val, tar) => {\n    if (isNotNumber(val)) throw new Error("\'$lte\' value must be a number");\n    return tar <= val;\n  },\n  // 不等于\n  $ne: (val, tar) => {\n    return tar !== val;\n  },\n  // 不包含\n  $nin: (val, tar) => {\n    if (!(val instanceof Array)) throw new Error("\'$nin\' value must be an array");\n    return !val.includes(tar);\n  },\n  // 检查存在\n  _checkExist: op => {\n    if (ops.includes(op)) {\n      return true;\n    }\n\n    throw new Error("unknown operator: \'" + op + "\'");\n  }\n}; // 生成uuid\n\nconst uuid = (len, radix) => {\n  var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");\n  var uuid = [],\n      i;\n  radix = radix || chars.length;\n\n  if (len) {\n    // Compact form\n    for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random() * radix];\n  } else {\n    // rfc4122, version 4 form\n    var r; // rfc4122 requires these characters\n\n    uuid[8] = uuid[13] = uuid[18] = uuid[23] = "-";\n    uuid[14] = "4"; // Fill in random data.  At i==19 set the high bits of clock sequence as\n    // per rfc4122, sec. 4.1.5\n\n    for (i = 0; i < 36; i++) {\n      if (!uuid[i]) {\n        r = 0 | Math.random() * 16;\n        uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];\n      }\n    }\n  }\n\n  return uuid.join("");\n};\n\nconst isObject = object => {\n  return object instanceof Object && object.constructor.name === "Object";\n};\n\nconst isArray = array => {\n  return array instanceof Array && array.constructor.name === "Array";\n}; // 检查是否支持 storage\n\n\nconst isSupported = storage => {\n  if (!storage || !(storage instanceof Object)) {\n    return false;\n  }\n\n  try {\n    storage.setItem("_supported", "1");\n    storage.removeItem("_supported");\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst queryMatch = (query, target) => {\n  if (!query || !Object.keys(query).length) {\n    return true;\n  }\n\n  for (let field of Object.keys(query)) {\n    let val = query[field];\n    let tar = target[field];\n\n    if (val instanceof RegExp) {\n      if (!val.test(tar)) {\n        return false;\n      }\n    } else if (isObject(val)) {\n      for (let op of Object.keys(val)) {\n        if (Operator._checkExist(op) && !Operator[op](val[op], tar)) {\n          return false;\n        }\n      }\n    } else if (val !== tar) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst sortCompare = (sort, a, b, i, fields) => {\n  i = i || 0;\n  fields = fields || Object.keys(sort);\n  let field = fields[i];\n\n  if (!field) {\n    return 0;\n  }\n\n  if (a[field] === b[field]) {\n    i++;\n    return sortCompare(sort, a, b, i, fields);\n  }\n\n  if (sort[field] === 1) {\n    return a[field] - b[field];\n  }\n\n  if (sort[field] === -1) {\n    return b[field] - a[field];\n  }\n};\n\nclass Collection {\n  constructor(db, name, opts) {\n    opts = opts || {};\n    this.name = name; // 名称\n\n    this.storage = db.storage; // 当前storage\n\n    this.path = db.database + db.sep + name; // 路径\n\n    this.primaryKey = opts.primaryKey || db.primaryKey;\n    this.cache = []; // 缓存\n\n    this.cacheable = false; // 是否可缓存\n  } // 初始化缓存\n\n\n  _initCache() {\n    let cache = [];\n    let filterExp = new RegExp("^" + this.path);\n\n    for (let key of Object.keys(this.storage)) {\n      if (filterExp.test(key)) {\n        cache = JSON.parse(this.storage.getItem(key));\n      }\n    }\n\n    this.cache = cache;\n    this.cacheable = true;\n  }\n\n  _filter(filter, opts) {\n    opts.type = opts.type || "data"; // data, id\n\n    opts.multi = opts.multi || false;\n\n    if (!this.cacheable) {\n      this._initCache();\n    }\n\n    let res = [];\n    let isFnFilter;\n    let isTypeId = opts.type === "id";\n\n    if (typeof filter === "string") {\n      filter = new RegExp(filter);\n    } else if (typeof filter === "function") {\n      isFnFilter = true;\n    } else if (!filter) {\n      let ret = isTypeId ? Object.keys(this.cache) : Object.values(this.cache);\n\n      if (opts.multi) {\n        return ret;\n      } else {\n        return ret[0] || null;\n      }\n    }\n\n    for (let key of Object.keys(this.cache)) {\n      let val = this.cache[Number(key)];\n\n      if (isFnFilter) {\n        if (filter(key, val)) {\n          let ret = isTypeId ? key : val;\n\n          if (opts.multi) {\n            res.push(ret);\n          } else {\n            return ret;\n          }\n        }\n      } else {\n        if (filter.test(val[this.primaryKey])) {\n          let ret = isTypeId ? key : val;\n\n          if (opts.multi) {\n            res.push(ret);\n          } else {\n            return ret;\n          }\n        }\n      }\n    }\n\n    return opts.multi ? res : null;\n  }\n\n  inset(data, opts) {\n    var _a;\n\n    let arrayInsert = isArray(data);\n    let objectInset = isObject(data);\n\n    if (arrayInsert) {\n      if (data.length === 0) {\n        return [];\n      }\n    } else {\n      data = [data];\n    }\n\n    let pk = this.primaryKey;\n    let cacheable = this.cacheable;\n    let pathData = JSON.parse(this.storage.getItem(this.path) || "[]");\n\n    for (let row of data) {\n      if (!objectInset && !arrayInsert) {\n        throw new Error("TypeError: insert data must be an object or an object array");\n      }\n\n      if (typeof row[pk] === "undefined" || ((_a = row[pk]) === null || _a === void 0 ? void 0 : _a.length) === 0) {\n        row[pk] = uuid();\n      }\n\n      if (!row.createdTime) {\n        row.createdTime = new Date();\n        row.updatedTime = "";\n      }\n\n      if (cacheable) {\n        this.cache = pathData.concat(row);\n      }\n\n      this.storage.setItem(this.path, JSON.stringify(pathData.concat(row)));\n    }\n\n    return arrayInsert ? data : data[0];\n  }\n  /**\r\n   *\r\n   * find(\'\')\r\n   * find([\'\', \'\'])\r\n   *\r\n   */\n\n\n  find(query, opts) {\n    query = query || {};\n    opts = opts || {};\n    opts.skip = opts.skip || 0;\n    opts.limit = opts.limit;\n    opts.sort = opts.sort;\n\n    if (isArray(opts.sort)) {\n      opts.sort = opts.sort.reduce((res, item) => {\n        if (typeof item === "string") {\n          res[item] = 1;\n        } else if (item instanceof Array && item.length) {\n          res[item[0]] = item[1] || 1;\n        }\n\n        return res;\n      }, {});\n    }\n\n    let data;\n    let ids = isObject(query) ? null : isArray(query) ? query : [query];\n    let filterOpts = {\n      type: opts._filterType || "data",\n      multi: true\n    };\n\n    if (ids) {\n      // 当前查询参数为单个 id 或数组 ids\n      let filterRegExp = new RegExp("^" + ids.join("|") + "$");\n      data = this._filter(filterRegExp, filterOpts);\n    } else if (Object.keys(query).length) {\n      // by query\n      data = this._filter((_key, val) => {\n        return queryMatch(query, val);\n      }, filterOpts);\n    } else {\n      data = this._filter(null, filterOpts);\n    } // sort\n\n\n    if (opts.sort) {\n      data.sort((a, b) => {\n        return sortCompare(opts === null || opts === void 0 ? void 0 : opts.sort, a, b);\n      });\n    }\n\n    if (opts.limit) {\n      data = data.slice(opts.skip, opts.skip + opts.limit);\n    } else if (opts.skip) {\n      data = data.slice(opts.skip);\n    }\n\n    return data;\n  }\n\n  findOne(query, opts) {\n    query = query || {};\n    opts = opts || {};\n    let data;\n    let id = isObject(query) ? null : query;\n    let queryFields = query ? Object.keys(query) : [];\n    let quickTarget = false;\n    let needsSort = !!opts.sort;\n    let filterOpts = {\n      type: opts._filterType || "data",\n      multi: false\n    };\n\n    if (queryFields.length && queryFields.includes(this.primaryKey)) {\n      id = query[this.primaryKey];\n      quickTarget = true;\n    }\n\n    if (id) {\n      // by id\n      data = this.storage.getItem(this.path);\n      data = data ? JSON.parse(data) : null;\n\n      if (data && quickTarget && !queryMatch(query, data)) {\n        return null;\n      }\n\n      data = data ? data.find(i => i[this.primaryKey] === id) : undefined;\n    } else if (queryFields.length) {\n      // by query\n      if (needsSort) {\n        data = this.find(query, opts);\n      } else {\n        data = this._filter((key, val) => {\n          return queryMatch(query, val);\n        }, filterOpts);\n      }\n    } else {\n      if (needsSort) {\n        data = this.find(query, opts);\n      } else {\n        data = this._filter(null, filterOpts);\n      }\n    }\n\n    if (!id && needsSort && data) {\n      data = data[0] || null;\n    }\n\n    return data;\n  }\n\n  remove(query, opts) {\n    if (!query) {\n      throw new Error("remove needs a query");\n    }\n\n    opts = opts || {};\n    opts.multi = typeof opts.multi === "undefined" ? true : opts.multi;\n    let data = JSON.parse(this.storage.getItem(this.path));\n    let ids = opts.multi ? this.find(query, {\n      _filterType: "data"\n    }) : this.findOne(query, {\n      _filterType: "data"\n    });\n    let cacheable = this.cacheable;\n\n    if (opts.mulit && !ids.length || !opts.mulit && !ids) {\n      return 0;\n    }\n\n    if (!opts.multi) {\n      ids = [ids];\n    }\n\n    for (let id of ids) {\n      if (cacheable) {\n        this.cache = this.cache.filter(i => i[this.primaryKey] !== id[this.primaryKey]);\n      }\n\n      data = data.filter(i => i[this.primaryKey] !== id[this.primaryKey]);\n      this.storage.setItem(this.path, JSON.stringify(data));\n    }\n\n    return ids.length;\n  }\n\n  update(query, values, opts) {\n    if (!query) {\n      throw new Error("update needs a query");\n    }\n\n    if (!values || !isObject(values)) {\n      throw new Error("update needs an object");\n    }\n\n    opts = opts || {};\n    opts.multi = typeof opts.multi === "undefined" ? false : opts.multi;\n    let pk = this.primaryKey;\n    let cacheable = this.cacheable;\n\n    if (values[pk]) {\n      delete values[pk];\n    } // 查找需要更新的数据\n\n\n    let ids = opts.multi ? this.find(query, {\n      _filterType: (opts === null || opts === void 0 ? void 0 : opts._filterType) || "data"\n    }) : this.findOne(query, {\n      _filterType: (opts === null || opts === void 0 ? void 0 : opts._filterType) || "data"\n    });\n\n    if (opts.mulit && !ids.length || !opts.mulit && !ids) {\n      return 0;\n    } // 更新单个数据\n\n\n    if (!opts.multi) {\n      let id = ids;\n      let data = JSON.parse(this.storage.getItem(this.path));\n      if (!data) return null;\n      data = data.map(i => {\n        if (i[pk] === id[pk]) {\n          for (let j in values) {\n            i[j] = values[j];\n            i.updatedTime = new Date();\n          }\n        }\n\n        return i;\n      });\n      this.storage.setItem(this.path, JSON.stringify(data));\n\n      if (cacheable) {\n        this.cache = data;\n      }\n\n      return data;\n    } else {\n      // 更新多个数据\n      delete values[pk];\n      let id = ids;\n      let data = JSON.parse(this.storage.getItem(this.path));\n      if (!data) return null;\n      data = data.map(i => {\n        id.forEach(e => {\n          if (i[pk] === e[pk]) {\n            for (let j in values) {\n              i[j] = values[j];\n              i.updatedTime = new Date();\n            }\n          }\n        });\n        return i;\n      });\n\n      if (cacheable) {\n        this.cache = data;\n      }\n\n      this.storage.setItem(this.path, JSON.stringify(data));\n      return ids.length;\n    }\n  }\n\n  drop() {\n    this.remove({});\n    return true;\n  }\n\n  count() {\n    let data = this.storage.getItem(this.path);\n    return data ? JSON.parse(data).length : undefined;\n  }\n\n}\n\nclass StorageDB {\n  constructor(opts) {\n    this.storage = opts.storage || window && window.localStorage;\n    this.database = opts.database || "db";\n    this.primaryKey = opts.primaryKey || "_id";\n    this.sep = opts.sep || ":";\n\n    if (!isSupported(this.storage)) {\n      this.storage = null;\n    }\n  } // 使用数据库\n\n\n  get(name, opts) {\n    return new Collection(this, name, opts || {\n      storage: this.storage,\n      database: this.database,\n      primaryKey: this.primaryKey,\n      sep: this.sep\n    });\n  }\n\n  collection(name, opts) {\n    return this.get(name, opts);\n  } // 当前数据库占用空间\n\n\n  size() {\n    let size = 0;\n\n    for (let i in this.storage) {\n      if (this.storage.hasOwnProperty(i) && i.indexOf(this.database + ":") !== -1) {\n        const item = this.storage.getItem(i);\n        size += item ? item.length : 0;\n      }\n    }\n\n    return size;\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StorageDB);\n\n//# sourceURL=webpack://StorageDB/./src/index.ts?')}},__webpack_require__={d:(n,e)=>{for(var t in e)__webpack_require__.o(e,t)&&!__webpack_require__.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},o:(n,e)=>Object.prototype.hasOwnProperty.call(n,e),r:n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})}},__webpack_exports__={};return __webpack_modules__["./src/index.ts"](0,__webpack_exports__,__webpack_require__),__webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));